// ðŸ¦• AUTOGENERATED! DO NOT EDIT! File to edit: bsky.ipynb

import { AtpAgent } from "npm:@atproto/api";
import type { AppBskyFeedDefs, AppBskyFeedPost } from "npm:@atproto/api";
const postURLToAtpURI = async (
  postUrl: string,
  agent: AtpAgent,
): Promise<string> => {
  const urlParts = new URL(postUrl);
  const pathParts = urlParts.pathname.split("/");
  const h = await agent.resolveHandle({ handle: pathParts[2] });
  return `at://${h.data.did}/app.bsky.feed.post/${pathParts[4]}`;
};
const unwrapThreadPosts = (
  thread: AppBskyFeedDefs.ThreadViewPost,
): AppBskyFeedPost[] => {
  const posts: AppBskyFeedPost[] = [];

  // Add root post
  if (thread.post) {
    posts.push(thread.post);
  }

  // Recursively handle replies
  if (thread.replies) {
    thread.replies.forEach((reply) => {
      posts.push(...unwrapThreadPosts(reply));
    });
  }

  // Handle nested reply if present
  if ("parent" in thread && thread.parent) {
    posts.push(...unwrapThreadPosts(thread.parent));
  }

  return posts;
};

export const downloadThread = async (
  postUrl: string,
  agent: AtpAgent,
): AppBskyFeedPost[] => {
  const d = await agent.getPostThread({
    uri: await postURLToAtpURI(postUrl, agent),
  });
  return unwrapThreadPosts(d.data.thread);
};
export const postToMd = (post: AppBskyFeedPost): string => {
  const text = post.record.text;
  return `
    # ${post.author.displayName} (@${post.author.handle}) - ${post.record.createdAt}

    ${text}
  `;
};
export const downloadPostToMd = async (postUrl: string): Promise<string> => {
  const agent = new AtpAgent({ service: "https://bsky.social" });

  await agent.login({
    identifier: Deno.env.get("BSKY_AGENT_IDENTIFIER"),
    password: Deno.env.get("BSKY_AGENT_PASSWORD"),
  });

  const posts = await downloadThread(
    postUrl,
    agent,
  );

  return posts.reduce((acc, post) => {
    return acc + postToMd(post);
  }, "");
};
